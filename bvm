#!/bin/sh

set -e -u

BVM_PATH=$(dirname $(realpath $0))

option_exec=""
option_iso=""
option_serial=""

which /usr/local/sbin/grub-bhyve >/dev/null 2>&1 || error "missing grub-bhyve."

# -----------------------------------------------------------------

error ()
{
    echo "error: $@"
    exit 1
}

usage ()
{
    cat <<EOF
Usage: bvm [ACTION] [OPTION...]

Actions: kickstart | install | exec | finish | console

Options:

    -n  VM name
    -i  ISO path
    -k  kickstart file
    -s  use nmdm(4) serial console
    -x  use exec(3) for bhyve

EOF
}

get_property ()
{
    zfs get -H -o value bvm:${1} ${vm_fs}
}

set_property ()
{
    zfs set bvm:${1}=${2} ${vm_fs}
}

del_property ()
{
    zfs inherit bvm:${1} ${vm_fs}
}

get_vm_root_fs ()
{
    zfs get -H -o value,name,source bvm:active | awk '$1 == "on" && $3 == "local" { print $2 }'
}

iface_address ()
{
    local _iface="$1"
    ifconfig ${_iface} | grep "inet" | head -n 1 | awk '{ print $2 }'
}

gw_iface ()
{
    route get default | grep "interface:" | awk '{ print $2 }'
}

gw_iface_address ()
{
    iface_address $(gw_iface)
}

destroy_ifaces ()
{
    for i in $(seq 1 $#); do
        ifconfig "$1" destroy
        shift
    done
}

check_bridge ()
{
    local _bridge="$1"

    ifconfig -l ether | rs 0 1 | grep "^${_bridge}\$" >/dev/null 2>&1
}

nmdm_base ()
{
    echo "/dev/nmdm-${vm_name}"
}

grub_for_centos_kickstart ()
{
    cat << EOF
linux /isolinux/vmlinuz ks=http://${kickstart_ip}:8000/kickstart.cfg
initrd /isolinux/initrd.img
boot
EOF
}

grub_for_centos_install ()
{
    cat << EOF
linux /isolinux/vmlinuz
initrd /isolinux/initrd.img
boot
EOF
}

grub_for_debian_kickstart ()
{
    cat << EOF
linux /install.amd/vmlinuz install auto=true priority=critical url=http://${kickstart_ip}:8000/kickstart.cfg
initrd /install.amd/initrd.gz
boot
EOF
}

grub_for_debian_install ()
{
    cat << EOF
linux /install.amd/vmlinuz
initrd /install.amd/initrd.gz
boot
EOF
}

grub_load ()
{
    local _mapfile="$1"
    local _root="$2"
    local _directory="$3"

    local _options="-m ${_mapfile}"

    if [ ${_directory} != "none" ]; then
        _options="${_options} -d ${_directory}"
    fi

    if [ "${action}" != kickstart ]; then
        if [ -n "${option_serial}" ]; then
            _options="${_options} -c $(nmdm_base)-A"
        fi
    fi

    if [ -e /dev/vmm/${vm_name} ]; then
        bhyvectl --vm=${vm_name} --destroy
    fi

    /usr/local/sbin/grub-bhyve -r ${_root} -M ${vm_memory} ${_options} ${vm_name}
}

grub_create_map ()
{
    local _mapfile="$1"

    echo "(hd0) ${vm_boot_image}" > ${_mapfile}

    if [ -n "${option_iso}" ]; then
        echo "(cd0) ${option_iso}" >> ${_mapfile}
    fi
}

bhyve_load_freebsd ()
{
    case ${action} in
        kickstart)
            bhyveload -m ${vm_memory}M -d ${option_iso} ${vm_name}
            ;;
        install)
            bhyveload -m ${vm_memory}M -d ${option_iso} ${vm_name}
            ;;
        exec)
            bhyveload -m ${vm_memory}M -d ${vm_boot_image} ${vm_name}
            ;;
        *)
    esac
}

bhyve_load_centos ()
{
    mapfile=$(mktemp -t bvm-mapfile)

    grub_create_map ${mapfile}

    case ${action} in
        kickstart)
            grub_for_centos_kickstart | grub_load ${mapfile} cd0 /nonexistent
            ;;
        install)
            grub_for_centos_install | grub_load ${mapfile} cd0 /nonexistent
            ;;
        exec)
            grub_load ${mapfile} hd0,msdos1 /grub2
            ;;
        *)
    esac

    rm -f ${mapfile}
}

bhyve_load_debian ()
{
    mapfile=$(mktemp -t bvm-mapfile)

    grub_create_map ${mapfile}

    case ${action} in
        kickstart)
            grub_for_debian_kickstart | grub_load ${mapfile} cd0 /nonexistent
            ;;
        install)
            grub_for_debian_install | grub_load ${mapfile} cd0 /nonexistent
            ;;
        exec)
            grub_load ${mapfile} hd0,msdos1 /boot/grub
            ;;
        *)
    esac

    rm -f ${mapfile}
}

bhyve_load ()
{
    case ${vm_ostype} in
        freebsd*)
            bhyve_load_freebsd
            ;;
        centos*)
            bhyve_load_centos
            ;;
        debian*)
            bhyve_load_debian
            ;;
        *)
            error "operating system not supported (${vm_ostype})."
    esac
}

bhyve_exec ()
{
    local -

    if [ -z "${option_serial}" ]; then
        [ -t 0 ] || error "a terminal is required when using the stdio console."
    fi

    local _devices=""
    local _tap_list=""

    _devices="${_devices} -s 0:0,hostbridge"
    _devices="${_devices} -s 1:0,lpc"

    local _slot=2

    local _error=0

    for _item in $(echo "${vm_network}" | tr "," "\n"); do
        set -- $(echo ${_item} | tr "/" " ")

        set +u
        _bridge="$1"
        _mac="$2"
        set -u

        check_bridge ${_bridge} || error "bridge interface does not exist (${_bridge})."

        local _tap="$(ifconfig tap create)"

        if [ -z "${_tap_list}" ]; then
            _tap_list="${_tap}"
        else
            _tap_list="${_tap_list} ${_tap}"
        fi

        if ! ifconfig ${_bridge} addm ${_tap}; then
            error "could not add interface ${_tap} to bridge ${vm_network}."
        fi

        local _mac=""

        if [ -n "${_mac}" ]; then
            _mac="${_mac},mac=${vm_ifmac}"
        fi

        _devices="${_devices} -s ${_slot}:0,virtio-net,${_tap}${_mac}"

        _slot=$((${_slot} + 1))
    done || {
        _error=$?
    }

    if [ ${_error} -ne 0 ]; then
        destroy_ifaces ${_tap_list}
        return ${_error}
    fi

    set_property tap_list ${_tap_list}

    local _index=0

    while true; do
        local _disk_fs=${vm_fs}/disk${_index}
        local _disk=/dev/zvol/${_disk_fs}

        if [ -e ${_disk} ]; then
            if zfs list -H -o name ${_disk_fs}@boot >/dev/null 2>&1; then
                echo "rollback: ${_disk_fs}@boot"
                zfs rollback -r ${_disk_fs}@boot
            fi

            _devices="${_devices} -s ${_slot}:0,virtio-blk,${_disk}"
            _index=$((${_index} + 1))
            _slot=$((${_slot} + 1))
        else
            break
        fi
    done

    if [ -n "${option_iso}" ]; then
        _devices="${_devices} -s 31:0,ahci-cd,${option_iso}"
    fi

    local _exec=""

    if [ -n "${option_exec}" ]; then
        _exec="exec "
    fi

    local _console="stdio"

    if [ -n "${option_serial}" ]; then
        _console="$(nmdm_base)-A"
    fi

    ${_exec} bhyve -c ${vm_cores} -m ${vm_memory}M -H -P -A -u -l com1,${_console} ${_devices} ${vm_name}
}

perform_kickstart ()
{
    which /usr/local/sbin/lighttpd >/dev/null 2>&1 || error "missing lighttpd."

    [ -e ${option_iso} ] || error "ISO image not found (${option_iso})."
    [ -e ${option_kickstart} ] || error "kickstart file not found (${option_kickstart})."

    kickstart_ip=$(gw_iface_address)

    local _lighttpd_root=$(mktemp -d)
    local _lighttpd_pid=$(mktemp)
    local _lighttpd_conf=$(mktemp)

    cp ${option_kickstart} ${_lighttpd_root}/kickstart.cfg

    zfs snapshot ${vm_fs}@pre-install-$(date +%FT%T)

    local _session=$(uuidgen)

    cat << EOF > ${_lighttpd_conf}
server.pid-file = "${_lighttpd_pid}"
server.port = 8000
server.document-root = "${_lighttpd_root}"
dir-listing.activate = "enable"
EOF

    /usr/local/sbin/lighttpd -f ${_lighttpd_conf}

    local _error=0

    {
        perform_exec
    } || {
        _error=$?
    }

    pkill -F ${_lighttpd_pid}

    rm -f ${_lighttpd_root}/kickstart.cfg

    rmdir ${_lighttpd_root}

    return ${_error}
}

perform_install ()
{
    [ -e ${option_iso} ] || error "ISO image not found (${option_iso})."

    zfs snapshot -r ${vm_fs}@pre-install-$(date +%FT%T)

    perform_exec
}

perform_exec ()
{
    trap perform_finish EXIT

    bhyve_load
    bhyve_exec
}

perform_finish ()
{
    if [ -e /dev/vmm/${vm_name} ]; then
        bhyvectl --vm=${vm_name} --destroy
    fi

    local _tap_list=$(get_property tap_list)

    if [ ${_tap_list} != "-" ]; then
        del_property tap_list
        destroy_ifaces ${_tap_list}
    fi
}

perform_console ()
{
    local _device="$(nmdm_base)-B"

    if [ -c ${_device} ]; then
        kermit -l ${_device}
    fi
}

# -----------------------------------------------------------------

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

if [ $(get_vm_root_fs | wc -l) -ne 1 ]; then
    error "filesystem not properly configured."
fi

vm_root_fs=$(get_vm_root_fs)

kldstat -n vmm >/dev/null 2>&1 || error "vmm kernel module not loaded."

action="$1"

shift

while getopts "n:i:k:sx" _option; do
    case ${_option} in
        n) vm_name=${OPTARG}
           ;;
        i) option_iso=${OPTARG}
           ;;
        k) option_kickstart=${OPTARG}
           ;;
        s) option_serial=YES
           ;;
        x) option_exec=YES
           ;;
        *)
    esac
done

shift $((${OPTIND} - 1))

vm_fs=${vm_root_fs}/${vm_name}

vm_ostype=$(get_property ostype)
vm_cores=$(get_property cores)
vm_memory=$(get_property memory)
vm_network=$(get_property network)

vm_boot_image=/dev/zvol/${vm_fs}/disk0

[ -e ${vm_boot_image} ] || error "missing boot image (${vm_boot_image})."

: ${vm_name} ${vm_ostype} ${vm_cores} ${vm_memory} ${vm_network}

perform_${action} "$@"
