#!/bin/sh

set -e -u

BVM_PATH=$(dirname $(realpath $0))

vm_root_fs=$(zfs get -H -o value,name bvm:active | awk '$1 == "on" { print $2 }' | head -n 1)

option_exec=""
option_iso=""
option_serial=""

# -----------------------------------------------------------------

error ()
{
    echo "$@"
    exit 1
}

check_bridge ()
{
    local _bridge="$1"

    ifconfig -l ether | rs 0 1 | grep "^${_bridge}\$" >/dev/null 2>&1
}

grub_for_centos_kickstart ()
{
    cat << EOF
linux /isolinux/vmlinuz ks=${option_url}
initrd /isolinux/initrd.img
boot
EOF
}

grub_for_centos_install ()
{
    cat << EOF
linux /isolinux/vmlinuz
initrd /isolinux/initrd.img
boot
EOF
}

grub_for_debian_kickstart ()
{
    cat << EOF
linux /install.amd/vmlinuz install auto=true priority=critical url=${option_url}
initrd /install.amd/initrd.gz
boot
EOF
}

grub_for_debian_install ()
{
    cat << EOF
linux /install.amd/vmlinuz
initrd /install.amd/initrd.gz
boot
EOF
}

grub_load ()
{
    local _mapfile="$1"
    local _root="$2"
    local _directory="$3"

    local _options="-m ${_mapfile}"

    if [ ${_directory} != "none" ]; then
        _options="${_options} -d ${_directory}"
    fi

    if [ "${action}" != kickstart ]; then
        if [ -n "${option_serial}" ]; then
            _options="${_options} -c /dev/nmdm-${vm_name}-A"
        fi
    fi

    if [ -e /dev/vmm/${vm_name} ]; then
        bhyvectl --vm=${vm_name} --destroy
    fi

    /usr/local/sbin/grub-bhyve -r ${_root} -M ${vm_memory} ${_options} ${vm_name}
}

grub_create_map ()
{
    local _mapfile="$1"

    echo "(hd0) ${vm_boot_image}" > ${_mapfile}

    if [ -n "${option_iso}" ]; then
        echo "(cd0) ${option_iso}" >> ${_mapfile}
    fi
}

bhyve_load_freebsd ()
{
    case ${action} in
        kickstart)
            bhyveload -m ${vm_memory}M -d ${option_iso} ${vm_name}
            ;;
        install)
            bhyveload -m ${vm_memory}M -d ${option_iso} ${vm_name}
            ;;
        exec)
            bhyveload -m ${vm_memory}M -d ${vm_boot_image} ${vm_name}
            ;;
        *)
    esac
}

bhyve_load_centos ()
{
    mapfile=$(mktemp -t bvm-mapfile)

    grub_create_map ${mapfile}

    case ${action} in
        kickstart)
            grub_for_centos_kickstart | grub_load ${mapfile} cd0 /nonexistent
            ;;
        install)
            grub_for_centos_install | grub_load ${mapfile} cd0 /nonexistent
            ;;
        exec)
            grub_load ${mapfile} hd0,msdos1 /grub2
            ;;
        *)
    esac

    rm -f ${mapfile}
}

bhyve_load_debian ()
{
    mapfile=$(mktemp -t bvm-mapfile)

    grub_create_map ${mapfile}

    case ${action} in
        kickstart)
            grub_for_debian_kickstart | grub_load ${mapfile} cd0 /nonexistent
            ;;
        install)
            grub_for_debian_install | grub_load ${mapfile} cd0 /nonexistent
            ;;
        exec)
            grub_load ${mapfile} hd0,msdos1 /boot/grub
            ;;
        *)
    esac

    rm -f ${mapfile}
}

bhyve_load ()
{
    case ${vm_os} in
        freebsd*)
            bhyve_load_freebsd
            ;;
        centos*)
            bhyve_load_centos
            ;;
        debian*)
            bhyve_load_debian
            ;;
        *)
            error "Operating system not supported: ${vm_os}."
    esac
}

bhyve_exec ()
{
    local _mac=""

    if [ "${vm_ifmac}" != "none" ]; then
        _mac="${_mac},mac=${vm_ifmac}"
    fi

    local _devices=""

    _devices="${_devices} -s 0:0,hostbridge"
    _devices="${_devices} -s 1:0,lpc"
    _devices="${_devices} -s 2:0,virtio-net,${state_tap}${_mac}"

    local _index=0
    local _slot=3

    while true; do
        local _disk=/dev/zvol/${vm_fs}/disk${_index}

        if [ -e ${_disk} ]; then
            _devices="${_devices} -s ${_slot}:0,virtio-blk,${_disk}"
            _index=$((${_index} + 1))
            _slot=$((${_slot} + 1))
        else
            break
        fi
    done

    if [ -n "${option_iso}" ]; then
        _devices="${_devices} -s 31:0,ahci-cd,${option_iso}"
    fi

    local _exec=""

    if [ -n "${option_exec}" ]; then
        _exec="exec "
    fi

    local _console="stdio"

    if [ -n "${option_serial}" ]; then
        _console="/dev/nmdm-${vm_name}-A"
    fi

    ${_exec} bhyve -c ${vm_cores} -m ${vm_memory}M -H -P -A -u -l com1,${_console} ${_devices} ${vm_name}
}

perform_kickstart ()
{
    [ -e ${option_iso} ] || error "ISO image not found: ${option_iso}."

    perform_exec

    zfs destroy ${vm_fs}@install
    zfs snapshot ${vm_fs}@install
}

perform_install ()
{
    [ -e ${option_iso} ] || error "ISO image not found: ${option_iso}."

    perform_exec

    zfs destroy ${vm_fs}@install
    zfs snapshot ${vm_fs}@install
}

perform_exec ()
{
    if [ -z "${option_serial}" ]; then
        [ -t 0 ] || error "A terminal is required when using the stdio console."
    fi

    check_bridge ${vm_bridge} || error "Bridge interface does not exist: ${vm_bridge}."

    state_tap="$(ifconfig tap create)"

    if ! ifconfig ${vm_bridge} addm ${state_tap}; then
        ifconfig ${state_tap} destroy || true
        error "Could not add interface ${state_tap} to bridge ${vm_bridge}."
    fi

    set_property interface ${state_tap}

    trap perform_finish EXIT

    bhyve_load
    bhyve_exec
}

perform_finish ()
{
    if [ -e /dev/vmm/${vm_name} ]; then
        bhyvectl --vm=${vm_name} --destroy
    fi

    state_tap=$(get_property interface)

    ifconfig "${vm_bridge}" deletem "${state_tap}" || true
    ifconfig "${state_tap}" destroy
}

perform_connect ()
{
    local _device="/dev/nmdm-${vm_name}-B"

    if [ -c ${_device} ]; then
        kermit -l ${_device}
    fi
}

get_property ()
{
    zfs get -H -o value bvm:${1} ${vm_fs}
}

set_property ()
{
    zfs set bvm:${1}=${2} ${vm_fs}
}

# -----------------------------------------------------------------

kldstat -n vmm >/dev/null 2>&1 || error "Missing kernel module: vmm."

action="$1"

shift

while getopts "n:i:u:sx" _option; do
    case ${_option} in
        n) vm_name=${OPTARG}
           ;;
        i) option_iso=${OPTARG}
           ;;
        u) option_url=${OPTARG}
           ;;
        s) option_serial=YES
           ;;
        x) option_exec=YES
           ;;
        *)
    esac
done

shift $((${OPTIND} - 1))

vm_fs=${vm_root_fs}/${vm_name}

vm_os=$(get_property os)
vm_cores=$(get_property cores)
vm_memory=$(get_property memory)
vm_ifmac=$(get_property ifmac)
vm_bridge=$(get_property bridge)

vm_boot_image=/dev/zvol/${vm_fs}/disk0

[ "${vm_ifmac}" = "-" ] && vm_ifmac="none"

[ -e ${vm_boot_image} ] || error "Missing boot image: ${vm_boot_image}."

: ${vm_name} ${vm_os} ${vm_cores} ${vm_memory} ${vm_ifmac}

: ${vm_bridge:=bridge0}

perform_${action} "$@"
